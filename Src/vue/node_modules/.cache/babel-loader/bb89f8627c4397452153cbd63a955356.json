{"remainingRequest":"C:\\Users\\15462\\Desktop\\vue\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\15462\\Desktop\\vue\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!C:\\Users\\15462\\Desktop\\vue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\15462\\Desktop\\vue\\node_modules\\@jiaminghi\\data-view\\lib\\components\\decoration12\\src\\main.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\15462\\Desktop\\vue\\node_modules\\@jiaminghi\\data-view\\lib\\components\\decoration12\\src\\main.vue","mtime":499162500000},{"path":"C:\\Users\\15462\\Desktop\\vue\\babel.config.js","mtime":1687783068000},{"path":"C:\\Users\\15462\\Desktop\\vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\15462\\Desktop\\vue\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"C:\\Users\\15462\\Desktop\\vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\15462\\Desktop\\vue\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IGF1dG9SZXNpemUgZnJvbSAnLi4vLi4vLi4vbWl4aW4vYXV0b1Jlc2l6ZSc7CmltcG9ydCB7IHV1aWQgfSBmcm9tICcuLi8uLi8uLi91dGlsL2luZGV4JzsKaW1wb3J0IHsgZGVlcE1lcmdlIH0gZnJvbSAnQGppYW1pbmdoaS9jaGFydHMvbGliL3V0aWwvaW5kZXgnOwppbXBvcnQgeyBkZWVwQ2xvbmUsIGdldENpcmNsZVJhZGlhblBvaW50IH0gZnJvbSAnQGppYW1pbmdoaS9jLXJlbmRlci9saWIvcGx1Z2luL3V0aWwnOwppbXBvcnQgeyBmYWRlIH0gZnJvbSAnQGppYW1pbmdoaS9jb2xvcic7CmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAnRHZEZWNvcmF0aW9uMTInLAogIG1peGluczogW2F1dG9SZXNpemVdLAogIHByb3BzOiB7CiAgICBjb2xvcjogewogICAgICB0eXBlOiBBcnJheSwKICAgICAgZGVmYXVsdDogKCkgPT4gW10KICAgIH0sCiAgICAvKioKICAgICAqIEBkZXNjcmlwdGlvbiBTY2FuIGFuaW1hdGlvbiBkdXIKICAgICAqLwogICAgc2NhbkR1cjogewogICAgICB0eXBlOiBOdW1iZXIsCiAgICAgIGRlZmF1bHQ6IDMKICAgIH0sCiAgICAvKioKICAgICAqIEBkZXNjcmlwdGlvbiBIYWxvIGFuaW1hdGlvbiBkdXIKICAgICAqLwogICAgaGFsb0R1cjogewogICAgICB0eXBlOiBOdW1iZXIsCiAgICAgIGRlZmF1bHQ6IDIKICAgIH0KICB9LAogIGRhdGEoKSB7CiAgICBjb25zdCBpZCA9IHV1aWQoKTsKICAgIHJldHVybiB7CiAgICAgIHJlZjogJ2RlY29yYXRpb24tMTInLAogICAgICBnSWQ6IGBkZWNvcmF0aW9uLTEyLWctJHtpZH1gLAogICAgICBncmFkaWVudElkOiBgZGVjb3JhdGlvbi0xMi1ncmFkaWVudC0ke2lkfWAsCiAgICAgIGRlZmF1bHRDb2xvcjogWycjMjc4M2NlJywgJyMyY2Y3ZmUnXSwKICAgICAgbWVyZ2VkQ29sb3I6IFtdLAogICAgICBwYXRoRDogW10sCiAgICAgIHBhdGhDb2xvcjogW10sCiAgICAgIGNpcmNsZVI6IFtdLAogICAgICBzcGxpdExpbmVQb2ludHM6IFtdLAogICAgICBhcmNEOiBbXSwKICAgICAgc2VnbWVudDogMzAsCiAgICAgIHNlY3RvckFuZ2xlOiBNYXRoLlBJIC8gMywKICAgICAgcmluZ051bTogMywKICAgICAgcmluZ1dpZHRoOiAxLAogICAgICBzaG93U3BsaXRMaW5lOiB0cnVlCiAgICB9OwogIH0sCiAgd2F0Y2g6IHsKICAgIGNvbG9yKCkgewogICAgICBjb25zdCB7CiAgICAgICAgbWVyZ2VDb2xvcgogICAgICB9ID0gdGhpczsKICAgICAgbWVyZ2VDb2xvcigpOwogICAgfQogIH0sCiAgY29tcHV0ZWQ6IHsKICAgIHgoKSB7CiAgICAgIGNvbnN0IHsKICAgICAgICB3aWR0aAogICAgICB9ID0gdGhpczsKICAgICAgcmV0dXJuIHdpZHRoIC8gMjsKICAgIH0sCiAgICB5KCkgewogICAgICBjb25zdCB7CiAgICAgICAgaGVpZ2h0CiAgICAgIH0gPSB0aGlzOwogICAgICByZXR1cm4gaGVpZ2h0IC8gMjsKICAgIH0KICB9LAogIG1ldGhvZHM6IHsKICAgIGluaXQoKSB7CiAgICAgIGNvbnN0IHsKICAgICAgICBtZXJnZUNvbG9yLAogICAgICAgIGNhbGNQYXRoRCwKICAgICAgICBjYWxjUGF0aENvbG9yLAogICAgICAgIGNhbGNDaXJjbGVSLAogICAgICAgIGNhbGNTcGxpdExpbmVQb2ludHMsCiAgICAgICAgY2FsY0FyY0QKICAgICAgfSA9IHRoaXM7CiAgICAgIG1lcmdlQ29sb3IoKTsKICAgICAgY2FsY1BhdGhEKCk7CiAgICAgIGNhbGNQYXRoQ29sb3IoKTsKICAgICAgY2FsY0NpcmNsZVIoKTsKICAgICAgY2FsY1NwbGl0TGluZVBvaW50cygpOwogICAgICBjYWxjQXJjRCgpOwogICAgfSwKICAgIG1lcmdlQ29sb3IoKSB7CiAgICAgIGNvbnN0IHsKICAgICAgICBjb2xvciwKICAgICAgICBkZWZhdWx0Q29sb3IKICAgICAgfSA9IHRoaXM7CiAgICAgIHRoaXMubWVyZ2VkQ29sb3IgPSBkZWVwTWVyZ2UoZGVlcENsb25lKGRlZmF1bHRDb2xvciwgdHJ1ZSksIGNvbG9yIHx8IFtdKTsKICAgIH0sCiAgICBjYWxjUGF0aEQoKSB7CiAgICAgIGNvbnN0IHsKICAgICAgICB4LAogICAgICAgIHksCiAgICAgICAgd2lkdGgsCiAgICAgICAgc2VnbWVudCwKICAgICAgICBzZWN0b3JBbmdsZQogICAgICB9ID0gdGhpczsKICAgICAgY29uc3Qgc3RhcnRBbmdsZSA9IC1NYXRoLlBJIC8gMjsKICAgICAgY29uc3QgYW5nbGVHYXAgPSBzZWN0b3JBbmdsZSAvIHNlZ21lbnQ7CiAgICAgIGNvbnN0IHIgPSB3aWR0aCAvIDQ7CiAgICAgIGxldCBsYXN0RW5kUG9pbnRzID0gZ2V0Q2lyY2xlUmFkaWFuUG9pbnQoeCwgeSwgciwgc3RhcnRBbmdsZSk7CiAgICAgIHRoaXMucGF0aEQgPSBuZXcgQXJyYXkoc2VnbWVudCkuZmlsbCgnJykubWFwKChfLCBpKSA9PiB7CiAgICAgICAgY29uc3QgZW5kUG9pbnRzID0gZ2V0Q2lyY2xlUmFkaWFuUG9pbnQoeCwgeSwgciwgc3RhcnRBbmdsZSAtIChpICsgMSkgKiBhbmdsZUdhcCkubWFwKF8gPT4gXy50b0ZpeGVkKDUpKTsKICAgICAgICBjb25zdCBkID0gYE0ke2xhc3RFbmRQb2ludHMuam9pbignLCcpfSBBJHtyfSwgJHtyfSAwIDAgMCAke2VuZFBvaW50cy5qb2luKCcsJyl9YDsKICAgICAgICBsYXN0RW5kUG9pbnRzID0gZW5kUG9pbnRzOwogICAgICAgIHJldHVybiBkOwogICAgICB9KTsKICAgIH0sCiAgICBjYWxjUGF0aENvbG9yKCkgewogICAgICBjb25zdCB7CiAgICAgICAgbWVyZ2VkQ29sb3I6IFtjb2xvcl0sCiAgICAgICAgc2VnbWVudAogICAgICB9ID0gdGhpczsKICAgICAgY29uc3QgY29sb3JHYXAgPSAxMDAgLyAoc2VnbWVudCAtIDEpOwogICAgICB0aGlzLnBhdGhDb2xvciA9IG5ldyBBcnJheShzZWdtZW50KS5maWxsKGNvbG9yKS5tYXAoKF8sIGkpID0+IGZhZGUoY29sb3IsIDEwMCAtIGkgKiBjb2xvckdhcCkpOwogICAgfSwKICAgIGNhbGNDaXJjbGVSKCkgewogICAgICBjb25zdCB7CiAgICAgICAgc2VnbWVudCwKICAgICAgICByaW5nTnVtLAogICAgICAgIHdpZHRoLAogICAgICAgIHJpbmdXaWR0aAogICAgICB9ID0gdGhpczsKICAgICAgY29uc3QgcmFkaXVzR2FwID0gKHdpZHRoIC8gMiAtIHJpbmdXaWR0aCAvIDIpIC8gcmluZ051bTsKICAgICAgdGhpcy5jaXJjbGVSID0gbmV3IEFycmF5KHJpbmdOdW0pLmZpbGwoMCkubWFwKChfLCBpKSA9PiByYWRpdXNHYXAgKiAoaSArIDEpKTsKICAgIH0sCiAgICBjYWxjU3BsaXRMaW5lUG9pbnRzKCkgewogICAgICBjb25zdCB7CiAgICAgICAgeCwKICAgICAgICB5LAogICAgICAgIHdpZHRoCiAgICAgIH0gPSB0aGlzOwogICAgICBjb25zdCBhbmdsZUdhcCA9IE1hdGguUEkgLyA2OwogICAgICBjb25zdCByID0gd2lkdGggLyAyOwogICAgICB0aGlzLnNwbGl0TGluZVBvaW50cyA9IG5ldyBBcnJheSg2KS5maWxsKCcnKS5tYXAoKF8sIGkpID0+IHsKICAgICAgICBjb25zdCBzdGFydEFuZ2xlID0gYW5nbGVHYXAgKiAoaSArIDEpOwogICAgICAgIGNvbnN0IGVuZEFuZ2xlID0gc3RhcnRBbmdsZSArIE1hdGguUEk7CiAgICAgICAgY29uc3Qgc3RhcnRQb2ludCA9IGdldENpcmNsZVJhZGlhblBvaW50KHgsIHksIHIsIHN0YXJ0QW5nbGUpOwogICAgICAgIGNvbnN0IGVuZFBvaW50ID0gZ2V0Q2lyY2xlUmFkaWFuUG9pbnQoeCwgeSwgciwgZW5kQW5nbGUpOwogICAgICAgIHJldHVybiBgJHtzdGFydFBvaW50LmpvaW4oJywnKX0gJHtlbmRQb2ludC5qb2luKCcsJyl9YDsKICAgICAgfSk7CiAgICB9LAogICAgY2FsY0FyY0QoKSB7CiAgICAgIGNvbnN0IHsKICAgICAgICB4LAogICAgICAgIHksCiAgICAgICAgd2lkdGgKICAgICAgfSA9IHRoaXM7CiAgICAgIGNvbnN0IGFuZ2xlR2FwID0gTWF0aC5QSSAvIDY7CiAgICAgIGNvbnN0IHIgPSB3aWR0aCAvIDIgLSAxOwogICAgICB0aGlzLmFyY0QgPSBuZXcgQXJyYXkoNCkuZmlsbCgnJykubWFwKChfLCBpKSA9PiB7CiAgICAgICAgY29uc3Qgc3RhcnRBbmdsZSA9IGFuZ2xlR2FwICogKDMgKiBpICsgMSk7CiAgICAgICAgY29uc3QgZW5kQW5nbGUgPSBzdGFydEFuZ2xlICsgYW5nbGVHYXA7CiAgICAgICAgY29uc3Qgc3RhcnRQb2ludCA9IGdldENpcmNsZVJhZGlhblBvaW50KHgsIHksIHIsIHN0YXJ0QW5nbGUpOwogICAgICAgIGNvbnN0IGVuZFBvaW50ID0gZ2V0Q2lyY2xlUmFkaWFuUG9pbnQoeCwgeSwgciwgZW5kQW5nbGUpOwogICAgICAgIHJldHVybiBgTSR7c3RhcnRQb2ludC5qb2luKCcsJyl9IEEke3h9LCAke3l9IDAgMCAxICR7ZW5kUG9pbnQuam9pbignLCcpfWA7CiAgICAgIH0pOwogICAgfSwKICAgIGFmdGVyQXV0b1Jlc2l6ZU1peGluSW5pdCgpIHsKICAgICAgY29uc3QgewogICAgICAgIGluaXQKICAgICAgfSA9IHRoaXM7CiAgICAgIGluaXQoKTsKICAgIH0sCiAgICBmYWRlCiAgfQp9Ow=="},{"version":3,"mappings":"AAqGA;AACA;AAEA;AAEA;AAEA;AAEA;EACAA;EACAC;EACAC;IACAC;MACAC;MACAC;IACA;IACA;AACA;AACA;IACAC;MACAF;MACAC;IACA;IACA;AACA;AACA;IACAE;MACAH;MACAC;IACA;EACA;EACAG;IACA;IACA;MACAC;MACAC;MACAC;MAEAC;MAEAC;MAEAC;MAEAC;MAEAC;MAEAC;MAEAC;MAEAC;MAEAC;MAEAC;MAEAC;MAEAC;IACA;EACA;EACAC;IACArB;MACA;QAAAsB;MAAA;MAEAA;IACA;EACA;EACAC;IACAC;MACA;QAAAC;MAAA;MAEA;IACA;IACAC;MACA;QAAAC;MAAA;MAEA;IACA;EACA;EACAC;IACAC;MACA;QAAAP;QAAAQ;QAAAC;QAAAC;QAAAC;QAAAC;MAAA;MAEAZ;MAEAQ;MAEAC;MAEAC;MAEAC;MAEAC;IACA;IACAZ;MACA;QAAAtB;QAAAS;MAAA;MAEA;IACA;IACAqB;MACA;QAAAN;QAAAE;QAAAD;QAAAT;QAAAC;MAAA;MAEA;MACA;MACA;MACA;MAEA,gCACAkB,SACAC;QACA;QACA;QACAC;QAEA;MACA;IACA;IACAN;MACA;QAAArB;QAAAM;MAAA;MAEA;MAEA,oCACAmB,YACAC;IACA;IACAJ;MACA;QAAAhB;QAAAE;QAAAO;QAAAN;MAAA;MAEA;MAEA,kCACAgB,QACAC;IACA;IACAH;MACA;QAAAT;QAAAE;QAAAD;MAAA;MAEA;MACA;MAEA,oCACAU,SACAC;QACA;QACA;QACA;QACA;QAEA;MACA;IACA;IACAF;MACA;QAAAV;QAAAE;QAAAD;MAAA;MAEA;MACA;MAEA,yBACAU,SACAC;QACA;QACA;QACA;QACA;QAEA;MACA;IACA;IACAE;MACA;QAAAT;MAAA;MAEAA;IACA;IACAU;EACA;AACA","names":["name","mixins","props","color","type","default","scanDur","haloDur","data","ref","gId","gradientId","defaultColor","mergedColor","pathD","pathColor","circleR","splitLinePoints","arcD","segment","sectorAngle","ringNum","ringWidth","showSplitLine","watch","mergeColor","computed","x","width","y","height","methods","init","calcPathD","calcPathColor","calcCircleR","calcSplitLinePoints","calcArcD","fill","map","lastEndPoints","afterAutoResizeMixinInit","fade"],"sourceRoot":"node_modules/@jiaminghi/data-view/lib/components/decoration12/src","sources":["main.vue"],"sourcesContent":["<template>\n  <div class=\"dv-decoration-12\" :ref=\"ref\">\n    <svg :width=\"width\" :height=\"height\">\n      <defs>\n        <g :id=\"gId\">\n          <path\n            :stroke=\"pathColor[i]\"\n            :stroke-width=\"width / 2\"\n            fill=\"transparent\"\n            v-for=\"(d, i) in pathD\"\n            :key=\"d\"\n            :d=\"d\"\n          />\n        </g>\n\n        <radialGradient\n          :id=\"gradientId\"\n          cx=\"50%\" cy=\"50%\" r=\"50%\"\n        >\n          <stop offset=\"0%\" stop-color=\"transparent\" stop-opacity=\"1\" />\n          <stop offset=\"100%\" :stop-color=\"fade(mergedColor[1] || defaultColor[1], 30)\" stop-opacity=\"1\" />\n        </radialGradient>\n      </defs>\n\n      <circle\n        v-for=\"r in circleR\"\n        :key=\"r\"\n        :r=\"r\"\n        :cx=\"x\"\n        :cy=\"y\"\n        :stroke=\"mergedColor[1]\"\n        :stroke-width=\"0.5\"\n        fill=\"transparent\"\n      />\n\n      <circle\n        r=\"1\"\n        :cx=\"x\"\n        :cy=\"y\"\n        stroke=\"transparent\"\n        :fill=\"`url(#${gradientId})`\"\n      >\n        <animate\n          attributeName=\"r\"\n          :values=\"`1;${width / 2}`\"\n          :dur=\"`${haloDur}s`\"\n          repeatCount=\"indefinite\"\n        />\n        <animate\n          attributeName=\"opacity\"\n          values=\"1;0\"\n          :dur=\"`${haloDur}s`\"\n          repeatCount=\"indefinite\"\n        />\n      </circle>\n\n      <circle\n        r=\"2\"\n        :cx=\"x\"\n        :cy=\"y\"\n        :fill=\"mergedColor[1]\"\n      />\n\n      <g v-if=\"showSplitLine\">\n        <polyline\n          v-for=\"p in splitLinePoints\"\n          :key=\"p\"\n          :points=\"p\"\n          :stroke=\"mergedColor[1]\"\n          :stroke-width=\"0.5\"\n          opacity=\"0.5\"\n        />\n      </g>\n\n      <path\n        v-for=\"d in arcD\"\n        :key=\"d\"\n        :d=\"d\"\n        :stroke=\"mergedColor[1]\"\n        stroke-width=\"2\"\n        fill=\"transparent\"\n      />\n\n      <use :xlink:href=\"`#${gId}`\">\n        <animateTransform\n          attributeName=\"transform\"\n          type=\"rotate\"\n          :values=\"`0, ${x} ${y};360, ${x} ${y}`\"\n          :dur=\"`${scanDur}s`\"\n          repeatCount=\"indefinite\"\n        />\n      </use>\n    </svg>\n\n    <div class=\"decoration-content\">\n      <slot></slot>\n    </div>\n  </div>\n</template>\n\n<script>\nimport autoResize from '../../../mixin/autoResize'\nimport { uuid } from '../../../util/index'\n\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index'\n\nimport { deepClone, getCircleRadianPoint } from '@jiaminghi/c-render/lib/plugin/util'\n\nimport { fade } from '@jiaminghi/color'\n\nexport default {\n  name: 'DvDecoration12',\n  mixins: [autoResize],\n  props: {\n    color: {\n      type: Array,\n      default: () => ([])\n    },\n    /**\n     * @description Scan animation dur\n     */\n    scanDur: {\n      type: Number,\n      default: 3\n    },\n    /**\n     * @description Halo animation dur\n     */\n    haloDur: {\n      type: Number,\n      default: 2\n    }\n  },\n  data () {\n    const id = uuid()\n    return {\n      ref: 'decoration-12',\n      gId: `decoration-12-g-${id}`,\n      gradientId: `decoration-12-gradient-${id}`,\n\n      defaultColor: ['#2783ce', '#2cf7fe'],\n\n      mergedColor: [],\n\n      pathD: [],\n\n      pathColor: [],\n\n      circleR: [],\n\n      splitLinePoints: [],\n\n      arcD: [],\n\n      segment: 30,\n\n      sectorAngle: Math.PI / 3,\n\n      ringNum: 3,\n\n      ringWidth: 1,\n\n      showSplitLine: true\n    }\n  },\n  watch: {\n    color () {\n      const { mergeColor } = this\n\n      mergeColor()\n    }\n  },\n  computed: {\n    x () {\n      const { width } = this\n\n      return width / 2\n    },\n    y () {\n      const { height } = this\n\n      return height / 2\n    }\n  },\n  methods: {\n    init () {\n      const { mergeColor, calcPathD, calcPathColor, calcCircleR, calcSplitLinePoints, calcArcD } = this\n\n      mergeColor()\n\n      calcPathD()\n\n      calcPathColor()\n\n      calcCircleR()\n\n      calcSplitLinePoints()\n\n      calcArcD()\n    },\n    mergeColor () {\n      const { color, defaultColor } = this\n\n      this.mergedColor = deepMerge(deepClone(defaultColor, true), color || [])\n    },\n    calcPathD () {\n      const { x, y, width, segment, sectorAngle } = this\n\n      const startAngle = -Math.PI / 2\n      const angleGap = sectorAngle / segment\n      const r = width / 4\n      let lastEndPoints = getCircleRadianPoint(x, y, r, startAngle)\n\n      this.pathD = new Array(segment)\n        .fill('')\n        .map((_, i) => {\n          const endPoints = getCircleRadianPoint(x, y, r, startAngle - (i + 1) * angleGap).map(_ => _.toFixed(5))\n          const d = `M${lastEndPoints.join(',')} A${r}, ${r} 0 0 0 ${endPoints.join(',')}`\n          lastEndPoints = endPoints\n\n          return d\n        })\n    },\n    calcPathColor () {\n      const { mergedColor: [color], segment } = this\n\n      const colorGap = 100 / (segment - 1)\n\n      this.pathColor = new Array(segment)\n        .fill(color)\n        .map((_, i) => fade(color, 100 - i * colorGap))\n    },\n    calcCircleR () {\n      const { segment, ringNum, width, ringWidth } = this\n\n      const radiusGap = (width / 2 - ringWidth / 2) / ringNum\n\n      this.circleR = new Array(ringNum)\n        .fill(0)\n        .map((_, i) => radiusGap * (i + 1))\n    },\n    calcSplitLinePoints () {\n      const { x, y, width } = this\n\n      const angleGap = Math.PI / 6\n      const r = width / 2\n\n      this.splitLinePoints = new Array(6)\n        .fill('')\n        .map((_, i) => {\n          const startAngle = angleGap * (i + 1)\n          const endAngle = startAngle + Math.PI\n          const startPoint = getCircleRadianPoint(x, y, r, startAngle)\n          const endPoint = getCircleRadianPoint(x, y, r, endAngle)\n\n          return `${startPoint.join(',')} ${endPoint.join(',')}`\n        })\n    },\n    calcArcD () {\n      const { x, y, width } = this\n\n      const angleGap = Math.PI / 6\n      const r = width / 2 - 1\n\n      this.arcD = new Array(4)\n        .fill('')\n        .map((_, i) => {\n          const startAngle = angleGap * (3 * i + 1)\n          const endAngle = startAngle + angleGap\n          const startPoint = getCircleRadianPoint(x, y, r, startAngle)\n          const endPoint = getCircleRadianPoint(x, y, r, endAngle)\n\n          return `M${startPoint.join(',')} A${x}, ${y} 0 0 1 ${endPoint.join(',')}`\n        })\n    },\n    afterAutoResizeMixinInit () {\n      const { init } = this\n\n      init()\n    },\n    fade\n  }\n}\n</script>"]}]}